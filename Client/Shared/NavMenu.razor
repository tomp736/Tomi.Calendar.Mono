@inject IModalService ModalService

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Tomi.Calendar.Mono</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/month">
                <span class="oi bi-calendar3" aria-hidden="true"></span> Month
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/week">
                <span class="oi bi-calendar2-week" aria-hidden="true"></span> Week
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/today">
                <span class="oi bi-calendar2-date" aria-hidden="true"></span> Today
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" @onclick="@(async() => await AddNewItem())">
                <span class="oi bi-calendar2-plus" aria-hidden="true"></span> Add New Item
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/tags">
                <span class="oi bi-calendar2-date" aria-hidden="true"></span> Tags
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/notes">
                <span class="oi bi-pencil-square" aria-hidden="true"></span> Notes
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected async Task AddNewItem()
    {
        var modal = ModalService.Show<CalendarItemEditView>("Add Calendar Item");
        var result = await modal.Result;

        StateHasChanged();
    }
}
